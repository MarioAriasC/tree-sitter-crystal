vim: sw=2

=================
plain identifiers
=================

fOo
f_0___
ü•∫
„ÅÇ„ÅÑ„ÅÜ„Åà„Åä

---

(source_file
  (identifier)
  (identifier)
  (identifier)
  (identifier))

============================
instance and class variables
============================

class Klass
  @a = 87
  @@b = "hjkl"

  def initialize(@a)
    puts @a + 2
  end

  def set_class_var(@@b)
  end
end

---
(source_file
  (class_def name: (constant)
    (assign lhs: (instance_var) rhs: (integer))
    (assign lhs: (class_var) rhs: (string))

    (method_def
      name: (identifier)
      params: (param_list (param name: (instance_var)))
      (call
        method: (identifier)
        arguments: (argument_list
          (op_call
            receiver: (instance_var)
            operator: (operator)
            argument: (integer)))))

    (method_def
      name: (identifier)
      params: (param_list (param name: (class_var))))))

====
self
====

self
self_
selfself

---

(source_file
  (self)
  (identifier)
  (identifier))

================
pseudo-constants
================

def pseudo_constants(caller_line = __LINE__, end_of_caller = __END_LINE__)
  puts "Called from line number: #{caller_line}"
  puts "Currently at line number: #{__LINE__}"
  puts "End of caller block is at: #{end_of_caller}"
  puts "File path is: #{__FILE__}"
  puts "Directory file is in: #{__DIR__}"
end

---
(source_file
  (method_def
    name: (identifier)
    params: (param_list
      (param name: (identifier) default: (pseudo_constant))
      (param name: (identifier) default: (pseudo_constant)))

    (call
      method: (identifier)
      arguments: (argument_list
        (string
          (string_interpolation
            (identifier)))))
    (call
      method: (identifier)
      arguments: (argument_list
        (string
          (string_interpolation
            (pseudo_constant)))))
    (call
      method: (identifier)
      arguments: (argument_list
        (string
          (string_interpolation
            (identifier)))))
    (call
      method: (identifier)
      arguments: (argument_list
        (string
          (string_interpolation
            (pseudo_constant)))))
    (call
      method: (identifier)
      arguments: (argument_list
        (string
          (string_interpolation
            (pseudo_constant)))))))

============
method calls
============

A.b

e()
c?
d!()

true.false?

m1?.m2

puts(b)

a b 7

a!.b!.c!

a b.c

a(b(c()))

pp a

   .

   b

---

(source_file
  (call
    receiver: (constant)
    method: (identifier))

  (call method: (identifier) arguments: (argument_list))
  (call method: (identifier))
  (call method: (identifier) arguments: (argument_list))

  (call
    receiver: (true)
    method: (identifier))

  (call
    receiver: (call
      method: (identifier))
    method: (identifier))

  (call
    method: (identifier)
    arguments: (argument_list (identifier)))

  (call
    method: (identifier)
    arguments: (argument_list
      (call
        method: (identifier)
        arguments: (argument_list (integer)))))

  (call
    receiver: (call
      receiver: (call
        method: (identifier))
      method: (identifier))
    method: (identifier))

  (call
    method: (identifier)
    arguments: (argument_list
      (call
        receiver: (identifier)
        method: (identifier))))

  (call
    method: (identifier)
    arguments: (argument_list
      (call
        method: (identifier)
        arguments: (argument_list
          (call
            method: (identifier)
            arguments: (argument_list))))))

  (call
    method: (identifier)
    arguments: (argument_list
      (call
        receiver: (identifier)
        method: (identifier ))))
            )

====================================
method calls with multiple arguments
====================================

puts true, -1, nil

puts false,
  0

puts(true, false, nil)
puts(true, false, nil,)
puts(
  true,
  false,
  nil,
)

---
(source_file
  (call
    method: (identifier)
    arguments: (argument_list
      (true) (integer) (nil)))

  (call
    method: (identifier)
    arguments: (argument_list
      (false) (integer)))

  (call
    method: (identifier)
    arguments: (argument_list (true) (false) (nil)))
  (call
    method: (identifier)
    arguments: (argument_list (true) (false) (nil)))
  (call
    method: (identifier)
    arguments: (argument_list (true) (false) (nil))))

================
plain assignment
================

a = 1.0

b =
c=
2

d=-0.zero?

(e=1f32)
.to_s

---

(source_file
  (assign
    lhs: (identifier)
    rhs: (float))

  (assign
    lhs: (identifier)
    rhs: (assign
      lhs: (identifier)
      rhs: (integer)))

  (assign
    lhs: (identifier)
    rhs: (call
      receiver: (integer)
      method: (identifier)))

  (call
    receiver: (assign
      lhs: (identifier)
      rhs: (float))
    method: (identifier)))

===================
constant assignment
===================

A = 1.0

B =
::C=
2

D::E=-0.zero?

---
(source_file
  (const_assign
    lhs: (constant)
    rhs: (float))

  (const_assign
    lhs: (constant)
    rhs: (const_assign
      lhs: (constant)
      rhs: (integer)))

  (const_assign
    lhs: (constant)
    rhs: (call
      receiver: (integer)
      method: (identifier))))

=================
method assignment
=================

::A.b = 1

self
.var =
true

c.foo.bar = d.baz!.quz = 8

---

(source_file
  (assign
    lhs: (assign_call
      receiver: (constant)
      method: (identifier))
    rhs: (integer))

  (assign
    lhs: (assign_call
      receiver: (self)
      method: (identifier))
    rhs: (true))

  (assign
    lhs: (assign_call
      receiver: (call
        receiver: (identifier)
        method: (identifier))
      method: (identifier))
    rhs: (assign
      lhs: (assign_call
        receiver: (call
          receiver: (identifier)
          method: (identifier))
        method: (identifier))
      rhs: (integer))))

===============
while and until
===============

while true; end

while 1
next; end

until a.nil?
  a = 2
  until a
    break
  end
end

----

(source_file
  (while
    condition: (true))

  (while
    condition: (integer)
    (next))

  (until
    condition: (call
      receiver: (identifier)
      method: (identifier))
    (assign
      lhs: (identifier)
      rhs: (integer))
    (until
      condition: (identifier)
      (break))))

============
begin blocks
============

begin 1 end
begin;2;end

begin
  begin
  end
end
begin begin end end

begin
  1
rescue
  2
end

begin 3; rescue; 4 end

begin
  5; rescue a;
  6; end

begin
  7
rescue Exception; 8
end

begin 9
rescue err : FooError | BarError
end

---

(source_file
  (begin_block body: (integer))
  (begin_block body: (integer))

  (begin_block body: (begin_block))
  (begin_block body: (begin_block))

  (begin_block
    body: (integer)
    rescue: (rescue_block
      body: (integer)))

  (begin_block
    body: (integer)
    rescue: (rescue_block
      body: (integer)))

  (begin_block
    body: (integer)
    rescue: (rescue_block
      variable: (identifier)
      body: (integer)))

  (begin_block
    body: (integer)
    rescue: (rescue_block
      type: (constant)
      body: (integer)))

  (begin_block
    body: (integer)
    rescue: (rescue_block
      variable: (identifier)
      type: (union_type (constant) (constant)))))

=========================
binary additive operators
=========================

1 + 2.0

a &+ b! - C

D &-
  (E)

puts "a" + "b".upcase

---

(source_file
  (op_call
    receiver: (integer)
    operator: (operator)
    argument: (float))

  (op_call
    receiver: (op_call
      receiver: (identifier)
      operator: (operator)
      argument: (call
        method: (identifier)))
    operator: (operator)
    argument: (constant))

  (op_call
    receiver: (constant)
    operator: (operator)
    argument: (constant))

  (call
    method: (identifier)
    arguments: (argument_list
      (op_call
        receiver: (string)
        operator: (operator)
        argument: (call
          receiver: (string)
          method: (identifier)))))

    )

========================
unary additive operators
========================

puts + 2
puts +2
puts+2
puts(+ 2)

a! - 1
b? -1
c-
1
d_ (- 2)

+-+0
+- 0.3

1-
+2
1-+ 2

- 8u8.to_i8

---
(source_file
  (op_call
    receiver: (identifier)
    operator: (operator)
    argument: (integer))
  (call
    method: (identifier)
    arguments: (argument_list (integer)))
  (op_call
    receiver: (identifier)
    operator: (operator)
    argument: (integer))
  (call
    method: (identifier)
    arguments: (argument_list
      (op_call
        operator: (operator)
        receiver: (integer))))

  (op_call
    receiver: (call
      method: (identifier))
    operator: (operator)
    argument: (integer))
  (call
    method: (identifier)
    arguments: (argument_list (integer)))
  (op_call
    receiver: (identifier)
    operator: (operator)
    argument: (integer))
  (call
    method: (identifier)
    arguments: (argument_list
      (op_call
        operator: (operator)
        receiver: (integer))))

  (op_call
    operator: (operator)
    receiver: (op_call
      operator: (operator)
      receiver: (integer)))
  (op_call
    operator: (operator)
    receiver: (op_call
      operator: (operator)
      receiver: (float)))

  (op_call
    receiver: (integer)
    operator: (operator)
    argument: (integer))
  (op_call
    receiver: (integer)
    operator: (operator)
    argument: (op_call
      operator: (operator)
      receiver: (integer)))

  (op_call
    operator: (operator)
    receiver: (call
      receiver: (integer)
      method: (identifier))))
