vim: sw=2

===
nil
===

nil

---

(source_file
  (nil))

=====
bools
=====

true
false

---

(source_file
  (true)
  (false))

===============
binary integers
===============

0b0
-0b1_
+0b_0_1_
0b1_______u8
+0b0u16
0b0_0_0_0u32
+0b_111u64
-0b10_10_01_01u128
0bi8
-0b01010i16
+0b01101i32
0b1001_1101i64
-0b___i128

---

(source_file
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer))

==============
octal integers
==============

0o0
-0o7_
+0o_2_6_
0o3_______u8
+0o1u16
0o0_1_2_3u32
+0o_777u64
-0o10_10_01_01u128
0oi8
-0o01_234i16
+0o01114i32
0o7036_1205i64
-0o___i128

---

(source_file
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer))

================
decimal integers
================

0
-0
0_
0_0_0
+0_1_234_0
1
-1
+1___0
+9__________
9u8
+1_2_3u16
4____2u32
+1234567890u64
888_888_888u128
-7i8
+3_3i16
32i32
-123_456_789i64
+1_000_000_000_000i128

---

(source_file
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer))

============
hex integers
============

0x0
+0x1
-0x__f__
0xu8
0xfFu16
+0x_dead_beef_u32
0x0123456789u64
0xAbC_dEfu128
0x42i8
-0x3f_ffi16
+0xi32
0x12341234i64
0xaabb_bbaa_abba_baabi128

---

(source_file
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer)
  (integer))


======
floats
======

0.0
0.0000
+1_2.3_4
-1.1e1
0_2.00f64
+0.1E2f32
0_7e-07
3E
52f32
-2e+2f64
1_e_

---

(source_file
  (float)
  (float)
  (float)
  (float)
  (float)
  (float)
  (float)
  (float)
  (float)
  (float)
  (float))


=====
chars
=====

'a'
'あ'
'"'
'🎅'

' '
'
'
''
'	'

'\0'
'\''
'\\'
'\a'
'\b'
'\e'
'\f'
'\n'
'\r'
'\t'
'\v'
'\u00aF'
'\u{0}'
'\u{20}'
'\u{abcd}'
'\u{aBcDe}'
'\u{10FFFF}'

---

(source_file
  (char)
  (char)
  (char)
  (char)

  (char)
  (char)
  (char)
  (char)

  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence))
  (char (char_escape_sequence)))

=======
strings
=======

""
"_"
"# not a comment"
"🔮"
" 	
"

"\
"
"\\"
"\""
"\a"
"\b"
"\e"
"\f"
"\n"
"\r"
"\t"
"\v"

"\0"
"\42"
"\177"

"\x69"
"\xff"

"\u26a1"
"\u{1F52E}"
"\u{48 45 4C 4C 4F}"

"\'"
"\c"
"\?"
"\#"

---

(source_file
  (string)
  (string)
  (string)
  (string)
  (string)

  (string (string_escape_sequence))
  (string (string_escape_sequence))
  (string (string_escape_sequence))
  (string (string_escape_sequence))
  (string (string_escape_sequence))
  (string (string_escape_sequence))
  (string (string_escape_sequence))
  (string (string_escape_sequence))
  (string (string_escape_sequence))
  (string (string_escape_sequence))
  (string (string_escape_sequence))

  (string (string_escape_sequence))
  (string (string_escape_sequence))
  (string (string_escape_sequence))

  (string (string_escape_sequence))
  (string (string_escape_sequence))

  (string (string_escape_sequence))
  (string (string_escape_sequence))
  (string (string_escape_sequence))

  (string (ignored_backslash))
  (string (ignored_backslash))
  (string (ignored_backslash))
  (string (ignored_backslash)))

====================
string interpolation
====================

"#"
"\#{"
"\#{}"

"#{2}"
"#{"#{"#{'a'}"}"}"

"hello, #{place.to_s}"

"#{a} + #{b} = #{a + b}"

---

(source_file
  (string)
  (string (ignored_backslash))
  (string (ignored_backslash))

  (string
    (string_interpolation
      (integer)))
  (string
    (string_interpolation
      (string
        (string_interpolation
          (string
            (string_interpolation
              (char)))))))

  (string
    (string_interpolation
      (call
        receiver: (identifier)
        method: (identifier))))

  (string
    (string_interpolation
      (identifier))
    (string_interpolation
      (identifier))
    (string_interpolation
      (op_call
        receiver: (identifier)
        operator: (operator)
        argument: (identifier)))))

======
arrays
======

[] of Bool

[
1,
2

]

[(),(),nil,] of Nil | Asdf

[[1,2],[3,4]]

[foo 1, 2, 3]

---

(source_file
  (array
    of: (constant))

  (array
    (integer)
    (integer))

  (array
    (empty_braces)
    (empty_braces)
    (nil)
    of: (union_type (constant) (constant)))

  (array
    (array
      (integer) (integer))
    (array
      (integer) (integer)))

  (array
    (call
      method: (identifier)
      arguments: (argument_list (integer) (integer) (integer)))))

======
hashes
======

{} of
  Int16 |
    Int32 =>
      Bool |
        Char

{'a'=>'b','c'=>'d'}of Char=>Char

{ "one" => 1, "two" => 2, }

{
  1 + 2 => { '3' => [3.0] }
}

---

(source_file
  (hash
    of_key: (union_type (constant) (constant))
    of_value: (union_type (constant) (constant)))

  (hash
    (hash_pair (char) (char))
    (hash_pair (char) (char))
    of_key: (constant)
    of_value: (constant)
  )

  (hash
    (hash_pair (string) (integer))
    (hash_pair (string) (integer)))

  (hash
    (hash_pair
      (op_call
        receiver: (integer)
        operator: (operator)
        argument: (integer))
      (hash
        (hash_pair
          (char)
          (array (float)))))))

======
ranges
======
a..1
5...7
0..
..60
...

1..2..3
4..5..
..6..7
..8...
...(..)

foo! .. 2
foo 1...2

foo 1, ...2

foo .. 6 + 7
foo .. - bar

foo bar... 8

puts(..)

---

(source_file
  (range
    begin: (identifier)
    operator: (operator)
    end: (integer))
  (range
    begin: (integer)
    operator: (operator)
    end: (integer))
  (range
    begin: (integer)
    operator: (operator))
  (range
    operator: (operator)
    end: (integer))
  (range operator: (operator))

  (range
    begin: (range
      begin: (integer)
      operator: (operator)
      end: (integer))
    operator: (operator)
    end: (integer))
  (range
    begin: (range
      begin: (integer)
      operator: (operator)
      end: (integer))
    operator: (operator))
  (range
    begin: (range
      operator: (operator)
      end: (integer))
    operator: (operator)
    end: (integer))
  (range
    begin: (range
      operator: (operator)
      end: (integer))
    operator: (operator))
  (range
    operator: (operator)
    end: (range operator: (operator)))

  (range
    begin: (call
      method: (identifier))
    operator: (operator)
    end: (integer))
  (call
    method: (identifier)
    arguments: (argument_list
      (range
        begin: (integer)
        operator: (operator)
        end: (integer))))

  (call
    method: (identifier)
    arguments: (argument_list
      (integer)
      (range
        operator: (operator)
        end: (integer))))

  (range
    begin: (identifier)
    operator: (operator)
    end: (op_call
      receiver: (integer)
      operator: (operator)
      argument: (integer)))

  (range
    begin: (identifier)
    operator: (operator)
    end: (op_call
      operator: (operator)
      receiver: (identifier)))

  (call
    method: (identifier)
    arguments: (argument_list
      (range
        begin: (identifier)
        operator: (operator)
        end: (integer))))

  (call
    method: (identifier)
    arguments: (argument_list
      (range operator: (operator)))))

======
tuples
======
{1, "foo", 'a'}

{(),}

{
{
1
}
}

{ {} of TypeA => TypeB}
---
(source_file
  (tuple
    (integer)
    (string)
    (char))

  (tuple (empty_braces))

  (tuple
    (tuple (integer)))

  (tuple
    (hash of_key: (constant) of_value: (constant))))
