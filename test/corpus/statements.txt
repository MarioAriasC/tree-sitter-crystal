================================================================================
blank file
================================================================================



--------------------------------------------------------------------------------

(source_file)

================================================================================
blank lines
================================================================================






true





def foo




end





--------------------------------------------------------------------------------

(source_file
  (true)
  (method_def
    name: (identifier)))

================================================================================
comments
================================================================================
# this is a comment

a + # asdf
2

1 #
+ #
2 #

##
##
--------------------------------------------------------------------------------

(source_file
  (comment)
  (op_call
    receiver: (identifier)
    operator: (operator)
    (comment)
    argument: (integer))
  (integer)
  (comment)
  (op_call
    operator: (operator)
    (comment)
    receiver: (integer))
  (comment)
  (comment)
  (comment))

================================================================================
require
================================================================================
require "colorize"
require "#{__DIR__}/relative_file"
--------------------------------------------------------------------------------

(source_file
  (require
    (string))
  (require
    (string
      (interpolation
        (pseudo_constant)))))

================================================================================
compound statements
================================================================================
;;;nil;;;
;nil;nil;
  ;;;;;

nil

nil;

nil; nil

nil; (nil;nil)

((()))
()

(nil)

(nil;)

(nil; nil)

(nil; (nil;nil))
--------------------------------------------------------------------------------

(source_file
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil)
  (nil))

================================================================================
aliases
================================================================================
alias Foo = Bar::Baz
--------------------------------------------------------------------------------

(source_file
  (alias
    name: (constant)
    type: (constant)))

================================================================================
modules
================================================================================
module A; end
module A
;;;;
end

module
M end

module M2 C=2;D=3 end

module ::A1::B2::C::D; end

module ::Outer
  module Inner
    true
    false
  end
end
--------------------------------------------------------------------------------

(source_file
  (module_def
    name: (constant))
  (module_def
    name: (constant))
  (module_def
    name: (constant))
  (module_def
    name: (constant)
    (const_assign
      lhs: (constant)
      rhs: (integer))
    (const_assign
      lhs: (constant)
      rhs: (integer)))
  (module_def
    name: (constant))
  (module_def
    name: (constant)
    (module_def
      name: (constant)
      (true)
      (false))))

================================================================================
classes
================================================================================
class A < Super; end

class B <
A
;;;;
end

class
MM end

class C2 C=2;D=3 end

class ::A1::B2::C::D < ::E::F::G; end

class ::Outer
  module Middle
    class Inner
      self
      nil
    end
  end
end
--------------------------------------------------------------------------------

(source_file
  (class_def
    name: (constant)
    superclass: (constant))
  (class_def
    name: (constant)
    superclass: (constant))
  (class_def
    name: (constant))
  (class_def
    name: (constant)
    (const_assign
      lhs: (constant)
      rhs: (integer))
    (const_assign
      lhs: (constant)
      rhs: (integer)))
  (class_def
    name: (constant)
    superclass: (constant))
  (class_def
    name: (constant)
    (module_def
      name: (constant)
      (class_def
        name: (constant)
        (self)
        (nil)))))

================================================================================
method definitions
================================================================================
def foo
  return 3
end

def bar; end
def
baz
end

def fizz() : Bool return true end

def qux(a, b	: Bool, c : Int32 = 7, d = nil) : Stuff
end

def buzz(
  outerx x = 2,
  outery y = 3,
)
  puts x + y
end
--------------------------------------------------------------------------------

(source_file
  (method_def
    name: (identifier)
    (return
      (integer)))
  (method_def
    name: (identifier))
  (method_def
    name: (identifier))
  (method_def
    name: (identifier)
    type: (constant)
    (return
      (true)))
  (method_def
    name: (identifier)
    params: (param_list
      (param
        name: (identifier))
      (param
        name: (identifier)
        type: (constant))
      (param
        name: (identifier)
        type: (constant)
        default: (integer))
      (param
        name: (identifier)
        default: (nil)))
    type: (constant))
  (method_def
    name: (identifier)
    params: (param_list
      (param
        extern_name: (identifier)
        name: (identifier)
        default: (integer))
      (param
        extern_name: (identifier)
        name: (identifier)
        default: (integer)))
    (call
      method: (identifier)
      arguments: (argument_list
        (op_call
          receiver: (identifier)
          operator: (operator)
          argument: (identifier))))))

================================================================================
method definitions with block parameters
================================================================================
def foo(&);end

def bar(&thingy); end

def baz(&asdf : Proc(Nil))
end

def qux(& : -> String | Int32)
end


def worst_syntax(b, &:
->);end
--------------------------------------------------------------------------------

(source_file
  (method_def
    name: (identifier)
    params: (param_list
      (block_param)))
  (method_def
    name: (identifier)
    params: (param_list
      (block_param
        name: (identifier))))
  (method_def
    name: (identifier)
    params: (param_list
      (block_param
        name: (identifier)
        type: (generic_instance_type
          (constant)
          params: (param_list
            (constant))))))
  (method_def
    name: (identifier)
    params: (param_list
      (block_param
        type: (proc_type
          return: (union_type
            (constant)
            (constant))))))
  (method_def
    name: (identifier)
    params: (param_list
      (param
        name: (identifier))
      (block_param
        type: (proc_type)))))

================================================================================
method definitions with splat parameters
================================================================================
def foo(*); end

def bar(a, *b : Int32, c, **d : Bool); end

def baz(*a, **b, &c); end
--------------------------------------------------------------------------------

(source_file
  (method_def
    name: (identifier)
    params: (param_list
      (splat_param)))
  (method_def
    name: (identifier)
    params: (param_list
      (param
        name: (identifier))
      (splat_param
        name: (identifier)
        type: (constant))
      (param
        name: (identifier))
      (double_splat_param
        name: (identifier)
        type: (constant))))
  (method_def
    name: (identifier)
    params: (param_list
      (splat_param
        name: (identifier))
      (double_splat_param
        name: (identifier))
      (block_param
        name: (identifier)))))

================================================================================
annotations
================================================================================
annotation Thing
end

annotation Foo::Thing2;;;;end

@[Thing]
@[Thing(  )]
@[ Foo:: Thing2 (
  1, *baz, foo: 2
) ]
class Asdf
  @[Foo("on def")]
  def c2(_, @[Foo("on param")] @[Foo2::Thing2] *arg, @[ Foo(1) ] **kwarg, @[Foo("on block")] &blk : Int32 ->)
  end
end
--------------------------------------------------------------------------------

(source_file
  (annotation_def
    name: (constant))
  (annotation_def
    name: (constant))
  (annotation
    (constant))
  (annotation
    (constant)
    arguments: (argument_list))
  (annotation
    (constant)
    arguments: (argument_list
      (integer)
      (splat
        (identifier))
      (named_arg
        name: (identifier)
        (integer))))
  (class_def
    name: (constant)
    (annotation
      (constant)
      arguments: (argument_list
        (string)))
    (method_def
      name: (identifier)
      params: (param_list
        (param
          name: (identifier))
        (splat_param
          (annotation
            (constant)
            arguments: (argument_list
              (string)))
          (annotation
            (constant))
          name: (identifier))
        (double_splat_param
          (annotation
            (constant)
            arguments: (argument_list
              (integer)))
          name: (identifier))
        (block_param
          (annotation
            (constant)
            arguments: (argument_list
              (string)))
          name: (identifier)
          type: (proc_type
            (constant)))))))
