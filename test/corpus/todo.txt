==========================
fun def params on newlines
:error
==========================

fun
extreme_fun
(
param1
:
Type
,
param2
:
Type
)
:
ReturnType
  puts "hello"
end

---

(expressions
  (fun_def
    name: (identifier)
    body: (expressions
      (identifier)
      (ERROR)
      (constant)
      (ERROR)
      (identifier)
      (ERROR)
      (constant))
    (ERROR)
    body: (constant)
    body: (call
      method: (identifier)
      arguments: (argument_list
        (string)))))

=============================================================
private or protected calls with keyword type declaration args
=============================================================

class Name
  private getter private : Qux
end

class ASTNode
  getter else : ASTNode?
end

---

(expressions
  (class_def
    name: (constant)
    (ERROR
      (private)
      (identifier)
      (private)
      (ERROR)
      (constant)))
  (class_def
    name: (constant)
    (ERROR
      (identifier))
    body: (expressions
      (nilable_constant
        (constant)))))

================================================================================
implicit object assignment call
:error
================================================================================
inner.try &.color=(color)
--------------------------------------------------------------------------------

(expressions)

==================================
case stmt with pseudo impl methods
:error
==================================

case 1
when .hello
when .responds_to?(:hello)
when .is_a?(String*)
when .as(String*)
when .as?(String*)
when .nil?
when .!
end

---

(expressions)

===============================
pseudo-methods with macro nodes
:error
===============================
a.is_a?({{type}})
---

(expressions)

============================================
macro variables in escaped macro expressions
:error
============================================
{% for n in [8, 16, 32, 64, 128] %}
  \{% if Int{{n}} == LibGMP::SI %}
  \{% end %}
{% end %}
---

(expressions)

===================================
comments inside nested named tuples
:error
===================================

MyConst1 = {
  # This is a comment
  name1: {
    sub1: [:foo, :bar]
  },
}

MyConst2 = {
  name1: {
    sub1: [:foo, :bar]
  },
}

---

(expressions
  (ERROR
    (const_assign
      (constant)
      (tuple
        (comment)
        (call
          (identifier)
          (ERROR
            (identifier))
          (argument_list
            (array
              (symbol)
              (symbol))))))
    (ERROR))
  (const_assign
    (constant)
    (named_tuple
      (named_expr
        (identifier)
        (named_tuple
          (named_expr
            (identifier)
            (array
              (symbol)
              (symbol))))))))

====================================
identifiers can end with `?` and '!'
====================================

def hello(world?)
  puts hello?
end

hello_there! : String = "meow"

puts hello_there!

---

(expressions
  (method_def
    (identifier)
    (param_list
      (param
        (identifier)))
    (ERROR)
    (expressions
      (call
        (identifier)
        (argument_list
          (call
            (identifier))))))
  (call
    (identifier)
    (argument_list
      (type_declaration
        (macro_var
          (MISSING identifier))
        (constant)
        (string))))
  (call
    (identifier)
    (argument_list
      (call
        (identifier)))))

======================
macro var in call args
======================

method.call %mvar

---

(expressions
  (call
    (call
      (identifier)
      (identifier))
    (operator)
    (argument_list
      (identifier))))

=======================
nillable implicit index
=======================

filters1.try(&.pos[name])
filters1.try(&.pos[name]?)

---

(expressions
  (call
    receiver: (identifier)
    method: (identifier)
    arguments: (argument_list
      (block_argument
        (implicit_object_call
          method: (identifier)
          arguments: (argument_list
            (array
              (identifier)))))))
  (call
    receiver: (identifier)
    method: (identifier)
    arguments: (argument_list
      (block_argument
        (implicit_object_call
          method: (identifier)
          arguments: (argument_list
            (array
              (identifier)))))
      (ERROR))))

===========
\b in regex
===========

%r(\b)

---

(expressions
  (ERROR
    (ERROR
      (char_escape_sequence))))

=========================
trailing if inside interp
=========================

"hello #{"world" if true}"

---

(expressions
  (ERROR
    (string
      (ERROR
        (identifier)))))

========================
macro var as block param
:error
========================

method do |%buffer|
  puts %buffer
end

---

(expressions
  (call
    method: (identifier)
    block: (block
      (ERROR)
      body: (expressions
        (call
          receiver: (macro_var
            name: (identifier))
          method: (operator)
          arguments: (argument_list
            (call
              receiver: (identifier)
              method: (operator)
              arguments: (argument_list
                (identifier)))))))))

=============================
def identifier with macro exp
:error
=============================

def hello_{{ "world" }}(a, b)
end

---

(expressions
  (method_def
    (identifier)
    (ERROR
      (macro_expression
        (string))
      (ERROR
        (identifier))
      (identifier))))

=====================
ivar macro expression
:error
=====================

@{{ name }} = %bar{name}

---

(expressions
  (ERROR
    (UNEXPECTED '{'))
  (assign
    (macro_expression
      (identifier))
    (macro_var
      (identifier)
      (identifier))))

==============================
uppercase mathematical letters
==============================
# In Crystal 1.15, these should be constants. They are currently parsed as
# identifiers because tree-sitter's unicode data is out-of-date.
# This should be fixed in tree-sitter 0.25.
ùêàùòº
ùôïùòºùòºùôï
---

(expressions
  (comment)
  (comment)
  (comment)
  (identifier)
  (identifier))

=================================
percent literals in macro content
=================================
macro foo
  %q( begin )
end
---

(expressions
  (macro_def
    name: (identifier)
    body: (expressions
      (macro_content)
      (macro_content)
      (macro_content)
      (macro_content))
    (MISSING "end")))

=========================
heredocs in macro content
=========================
macro foo
  <<-TEXT
  begin
  TEXT
end
---
(expressions
  (macro_def
    name: (identifier)
    body: (expressions
      (macro_content)
      (macro_content)
      (macro_content)
      (macro_content))
    (MISSING "end")))

======================================
macro that accepts a method definition
:error
======================================
memoize def method_3(arg_a : String, arg_b : String = "default-arg-b") : String
  arg_a + ", " + arg_b
end
-----
(expressions foo: ())

=========================
keyword as named argument
:error
=========================
pages.series(begin: 2, end: 2)
---
(expressions)

==========================
heredoc escape with indent
:error
==========================
p! <<-TEXT
 a
 \n
 b
 TEXT
---
(expressions)

===============================
modifier if in macro expression
:error
===============================
{{ skip_file if compare_versions(Crystal::VERSION, "1.3.0") >= 0 }}
---
(expressions)

==============
splat in tuple
:error
==============
{*sensor, distance(sensor, beacon)}
---
(expressions)

===================================
regular expressions starting with =
:error
===================================
a = /= (.*) =/
b = /== (.*) ==/
---
(expressions)

======================================
}} that doesn't end a macro expression
:error
======================================
{% if flag?(:win32) %}
  with_foo({bar: {baz: "*"}}) do
  end
{% end %}
---
(expressions)
