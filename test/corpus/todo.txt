==========================
fun def params on newlines
:error
==========================

fun
extreme_fun
(
param1
:
Type
,
param2
:
Type
)
:
ReturnType
  puts "hello"
end

---

(expressions
  (fun_def
    name: (identifier)
    body: (expressions
      (identifier)
      (ERROR)
      (constant)
      (ERROR)
      (identifier)
      (ERROR)
      (constant))
    (ERROR)
    body: (constant)
    body: (call
      method: (identifier)
      arguments: (argument_list
        (string)))))

=============================================================
private or protected calls with keyword type declaration args
=============================================================

class Name
  private getter private : Qux
end

---

(expressions
  (class_def
    name: (constant)
    (ERROR
      (private)
      (identifier)
      (private)
      (ERROR)
      (constant))))

================================================================================
implicit object assignment call
:error
================================================================================
inner.try &.color=(color)
--------------------------------------------------------------------------------

(expressions)

===============
inline macro if
===============

{% if flag?(:tracing) %} Crystal::Tracing.init {% end %}
GC.init

---

(expressions
  (macro_if
    (call
      (identifier)
      (argument_list
        (symbol))))
  (MISSING ";")
  (call
    (constant)
    (identifier)
    (argument_list
      (macro_end)))
  (call
    (constant)
    (identifier)))

========================
double? splat param type
:error
========================

class MyClass
  def self.new(**options : **T)
  end
end

---

(expressions
  (class_def
    (constant)
    (expressions
      (method_def
        (self)
        (identifier)
        (param_list
          (double_splat_param
            (identifier)
            (ERROR)
            (splat_type
              (constant))))))))

==================================
case stmt with pseudo impl methods
:error
==================================

case 1
when .hello
when .responds_to?(:hello)
when .is_a?(String*)
when .as(String*)
when .as?(String*)
when .nil?
when .!
end

---

(expressions)
